class Phonebook:
    def __init__(self):
        self.contacts = {}

    def add_contact(self, name, phone_number):
        if name in self.contacts:
            print(f"Contact {name} already exists. Updating phone number.")
        self.contacts[name] = phone_number
        print(f"Added contact: {name} - {phone_number}")

    def search_contact(self, name):
        if name in self.contacts:
            return f"{name}: {self.contacts[name]}"
        else:
            return f"Contact {name} not found."

    def delete_contact(self, name):
        if name in self.contacts:
            del self.contacts[name]
            print(f"Deleted contact: {name}")
        else:
            print(f"Contact {name} not found.")

    def display_contacts(self):
        if not self.contacts:
            print("\nNo contacts in the phonebook.")
            return
        print("Contacts:\n")
        for name, phone_number in self.contacts.items():
            print(f"{name}: {phone_number}")

    def merge_sort(self, names):
        if len(names) > 1:
            mid = len(names) // 2
            left_half = names[:mid]
            right_half = names[mid:]

            self.merge_sort(left_half)
            self.merge_sort(right_half)

            i = j = k = 0
            while i < len(left_half) and j < len(right_half):
                if left_half[i] < right_half[j]:
                    names[k] = left_half[i]
                    i += 1
                else:
                    names[k] = right_half[j]
                    j += 1
                k += 1

            while i < len(left_half):
                names[k] = left_half[i]
                i += 1
                k += 1

            while j < len(right_half):
                names[k] = right_half[j]
                j += 1
                k += 1

    def display_sorted_contacts(self):
        names = list(self.contacts.keys())
        self.merge_sort(names)
        print("Contacts sorted using Merge Sort:\n")
        for name in names:
            print(f"{name}: {self.contacts[name]}")

def main():
    phonebook = Phonebook()

    while True:
        print("\nPhonebook Menu:")
        print("1. Add Contact")
        print("2. Search Contact")
        print("3. Delete Contact")
        print("4. Display Contacts")
        print("5. Display Sorted Contacts")
        print("6. Quit")

        choice = input("Choose an option (1-6): ")

        if choice == '1':
            name = input("Enter contact name: ")
            phone_number = input("Enter phone number: ")
            phonebook.add_contact(name, phone_number)
        elif choice == '2':
            name = input("Enter contact name to search: ")
            print(phonebook.search_contact(name))
        elif choice == '3':
            name = input("Enter contact name to delete: ")
            phonebook.delete_contact(name)
        elif choice == '4':
            phonebook.display_contacts()
        elif choice == '5':
            phonebook.display_sorted_contacts()
        elif choice == '6':
            print("Exiting the phonebook.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
class Phonebook:
    def __init__(self):
        self.contacts = {}

    def add_contact(self, name, phone_number):
        if name in self.contacts:
            print(f"Contact {name} already exists. Updating phone number.")
        self.contacts[name] = phone_number
        print(f"Added contact: {name} - {phone_number}")

    def search_contact(self, name):
        if name in self.contacts:
            return f"{name}: {self.contacts[name]}"
        else:
            return f"Contact {name} not found."

    def delete_contact(self, name):
        if name in self.contacts:
            del self.contacts[name]
            print(f"Deleted contact: {name}")
        else:
            print(f"Contact {name} not found.")

    def display_contacts(self):
        if not self.contacts:
            print("\nNo contacts in the phonebook.")
            return
        print("Contacts:\n")
        for name, phone_number in self.contacts.items():
            print(f"{name}: {phone_number}")

    def merge_sort(self, names):
        if len(names) > 1:
            mid = len(names) // 2
            left_half = names[:mid]
            right_half = names[mid:]

            self.merge_sort(left_half)
            self.merge_sort(right_half)

            i = j = k = 0
            while i < len(left_half) and j < len(right_half):
                if left_half[i] < right_half[j]:
                    names[k] = left_half[i]
                    i += 1
                else:
                    names[k] = right_half[j]
                    j += 1
                k += 1

            while i < len(left_half):
                names[k] = left_half[i]
                i += 1
                k += 1

            while j < len(right_half):
                names[k] = right_half[j]
                j += 1
                k += 1

    def display_sorted_contacts(self):
        names = list(self.contacts.keys())
        self.merge_sort(names)
        print("Contacts sorted using Merge Sort:\n")
        for name in names:
            print(f"{name}: {self.contacts[name]}")

def main():
    phonebook = Phonebook()

    while True:
        print("\nPhonebook Menu:")
        print("1. Add Contact")
        print("2. Search Contact")
        print("3. Delete Contact")
        print("4. Display Contacts")
        print("5. Display Sorted Contacts")
        print("6. Quit")

        choice = input("Choose an option (1-6): ")

        if choice == '1':
            name = input("Enter contact name: ")
            phone_number = input("Enter phone number: ")
            phonebook.add_contact(name, phone_number)
        elif choice == '2':
            name = input("Enter contact name to search: ")
            print(phonebook.search_contact(name))
        elif choice == '3':
            name = input("Enter contact name to delete: ")
            phonebook.delete_contact(name)
        elif choice == '4':
            phonebook.display_contacts()
        elif choice == '5':
            phonebook.display_sorted_contacts()
        elif choice == '6':
            print("Exiting the phonebook.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
